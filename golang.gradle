import java.nio.file.Files
import java.nio.file.LinkOption

apply plugin: GoPlugin

class ForwardingByteArrayOutputStream extends ByteArrayOutputStream {
  OutputStream target

  @Override
  void write(int b) {
    target.write(b)
    super.write(b)
  }

  @Override
  void write(byte[] b, int off, int len) {
    target.write(b, off, len)
    super.write(b, off, len)
  }
}

class GoPlugin implements Plugin<Project> {
  static File relativeTo(File file, File base) {
    return new File(base.toURI().relativize(file.toURI()).path);
  }

  static boolean isGoFile(Object file) {
    return String.valueOf(file).toLowerCase().endsWith(".go")
  }

  static String guessCanonicalImport(File root) {
    def pattern = ~$/^package\s+main\s*//\s*import\s+"([^"]+)"/$
    for (def file in root.listFiles((FileFilter) { isGoFile(it) })) {
      for (def matcher in file.readLines().collect { it =~ pattern }) {
        if (matcher) {
          return matcher.group(1)
        }
      }
    }

    throw new RuntimeException("Oops, please add a canonical import path. See https://golang.org/doc/go1.4#canonicalimports'")
  }

  void apply(Project project) {
    project.configure(project) {
      GoPluginExtension config = project.extensions.create("golang", GoPluginExtension)

      afterEvaluate {
        def baseDir = project.buildFile.parentFile

        // get all non-vendored go files relative to the projects directory
        def sourceFiles = project.fileTree(baseDir) {
          include config.include
          exclude config.exclude
        }.collect { relativeTo(it, baseDir) }

        def goSourceFiles = sourceFiles.grep { isGoFile(it) }
        if (goSourceFiles.empty) {
          throw new RuntimeException("No *.go source files found")
        }

        // go path under build/
        def gopath = new File(project.buildDir, "gopath").absoluteFile

        // canonical import of the project
        def canonicalImport = guessCanonicalImport(baseDir)
        def canonicalImportFile = new File(gopath, "src/" + canonicalImport)

        // list of package names
        def packages = goSourceFiles.collect {
          def subdir = it.parentFile
          if (subdir != null) {
            (canonicalImport + "/" + subdir).replaceAll('/$', "")
          } else {
            canonicalImport
          }
        }.toSet()

        project.task('clean', type: Exec) {
          commandLine "rm", "-rf", "build/", config.binaryName
        }

        project.task('gopath') << {
          gopath.mkdirs()

          sourceFiles.each { file ->
            def target = new File(canonicalImportFile, file.path)

            if (!target.parentFile.exists())
              target.parentFile.mkdirs()

            // remove target if it exists
            if (Files.exists(target.toPath(), LinkOption.NOFOLLOW_LINKS))
              Files.delete(target.toPath())

            // link source file to target
            Files.createSymbolicLink(target.toPath(), file.absoluteFile.toPath())

            // copy file to the build directory
            // Files.copy(file.toPath(), target.toPath())
          }
        }

        if (new File(baseDir, "glide.yaml").exists()) {
          project.task("install-glide", type: Exec, dependsOn: "gopath") {
            commandLine "go", "get", "github.com/Masterminds/glide"
            environment "GOPATH", gopath
          }

          project.task("dependencies", type: Exec, dependsOn: "install-glide") {
            commandLine gopath.path + "/bin/glide", "install", "--force", "--delete", "--cache"
            workingDir canonicalImportFile
            environment "GOPATH", gopath
          }
        } else {
          project.task("dependencies", type: Exec, dependsOn: "gopath") {
            commandLine "go", "get", "-v"
            workingDir canonicalImportFile
            environment "GOPATH", gopath
          }
        }

        project.task("install-goimports", type: Exec, dependsOn: "gopath") {
          commandLine "go", "get", "golang.org/x/tools/cmd/goimports"
          environment "GOPATH", gopath
        }

        project.task("install-junit-report", type: Exec, dependsOn: "gopath") {
          commandLine "go", "get", "github.com/jstemmer/go-junit-report"
          environment "GOPATH", gopath
        }

        project.task("optimize-imports", type: Exec, dependsOn: ["dependencies", "install-goimports"]) {
          commandLine([gopath.path + "/bin/goimports", "-l", "-w"] + goSourceFiles)
          workingDir canonicalImportFile
          environment "GOPATH", gopath
        }

        project.task("format", type: Exec, dependsOn: ["gopath", "optimize-imports"]) {
          commandLine(["go", "fmt"] + packages)
          workingDir canonicalImportFile
          environment "GOPATH", gopath
        }

        project.task("run-test", type: Exec, dependsOn: "dependencies") {
          commandLine(["go", "test", "-v"] + packages)
          workingDir canonicalImportFile
          environment "GOPATH", gopath

          ignoreExitValue = true
          standardOutput = new ForwardingByteArrayOutputStream(target: System.out)

          //extension method stopTomcat.output() can be used to obtain the output:
          ext.output = {
            return standardOutput.toByteArray()
          }
        }

        project.task("test", type: Exec, dependsOn: ["install-junit-report", "run-test"]) {
          commandLine gopath.path + "/bin/go-junit-report", "--set-exit-code"
          workingDir canonicalImportFile
          environment "GOPATH", gopath

          doFirst {
            new File(buildDir, "outputs").mkdirs()

            // send the test output to the process
            standardInput = new ByteArrayInputStream(project.tasks."run-test".output())
            standardOutput = new FileOutputStream(new File(buildDir, "outputs/junit.xml"))
          }
        }

        project.task("build", type: Exec, dependsOn: "dependencies") {
          commandLine "go", "build", "-o", new File(baseDir, config.binaryName)
          workingDir canonicalImportFile
          environment "GOPATH", gopath
        }

        project.task("buildStaticForLinux", type: Exec, dependsOn: ["format", "dependencies"]) {
          commandLine "go", "build", "-o", new File(baseDir, config.binaryName)
          workingDir canonicalImportFile
          environment "GOPATH", gopath
          environment "CGO_ENABLED", 0
          environment "GOOS", "linux"
          environment "GOARCH", "amd64"
        }
      }
    }
  }

  static class GoPluginExtension {
    String binaryName = "output"
    List<String> include = ["**/*.go", "glide.*", "resources/**", "static/**"]
    List<String> exclude = ["**/vendor/**", "build/**"]
  }
}
